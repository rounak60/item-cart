(function() {
  window.Graph = (function() {
    Graph.prototype.graphData = void 0;

    Graph.prototype.colors = [];

    Graph.prototype.redrawOnResize = false;

    Graph.prototype.phaseCount = 0;

    function Graph($ele, graphData) {
      this.$ele = $ele;
      this.graphData = graphData;
      this.create();
      this.init();
    }

    Graph.prototype.init = function() {
      return this.redraw();
    };

    Graph.prototype.create = function() {
      this.svgEle = d3.select(this.$ele[0]).append('svg');
      this.baseGroup = this.svgEle.append("g");
      this.setDimensions();
    };

    Graph.prototype.setViewBox = function() {
      return this.svgEle.attr('viewBox', "0 0 " + this.netWidth + " " + this.netHeight);
    };

    Graph.prototype.setDimensions = function() {
      var $window, callback, firstTime;
      this.margin = this.margin || {
        left: 40,
        right: 120,
        top: 30,
        bottom: 80
      };
      this.marginOriginal = jQuery.extend(true, {}, this.margin);
      this.widgetPadding = {
        left: 15,
        right: 15,
        top: 15,
        bottom: 15
      };
      firstTime = true;
      this.resetDimension = callback = (function(_this) {
        return function() {
          var ref;
          ref = [_this.$ele.width() + (_this.widgetPadding.left + _this.widgetPadding.right), _this.$ele.height() + (_this.widgetPadding.top + _this.widgetPadding.bottom - 4)], _this.netWidth = ref[0], _this.netHeight = ref[1];
          _this.width = _this.netWidth - _this.margin.left - _this.margin.right;
          _this.height = _this.netHeight - _this.margin.top - _this.margin.bottom;
          _this.widthOriginal = _this.width;
          _this.svgEle.attr('width', _this.netWidth);
          _this.svgEle.attr('height', _this.netHeight);
          if (firstTime || _this.redrawOnResize) {
            firstTime = false;
            _this.setViewBox();
          }
        };
      })(this);
      $window = $(window);
      $window.on('resize', callback);
      $window.trigger('resize');
      $window.on('resize', (function(_this) {
        return function() {
          return _this.resize();
        };
      })(this));
      return this.svgEle.style('margin', -this.widgetPadding.left);
    };

    Graph.prototype.wrapText = function(_this, width) {
      var self, text, textLength;
      self = d3.select(_this);
      textLength = self.node().getComputedTextLength();
      text = self.text();
      while (textLength > width && text.length > 0) {
        text = text.slice(0, -1);
        self.text(text + '...');
        textLength = self.node().getComputedTextLength();
      }
    };

    Graph.prototype.drawLegends = function(data, colors) {
      var gridwidth, isOddLength, legendGrp, legendOffsetX, legendOffsetY, legendPerRow, length, maxRows, rowHeight, spacing, textWidth, totalOffset, wrapText;
      legendOffsetY = this.netHeight - this.widgetPadding.top - 8;
      legendOffsetX = this.widgetPadding.left;
      gridwidth = this.netWidth - this.widgetPadding.left - this.widgetPadding.right;
      spacing = 20;
      rowHeight = 15;
      textWidth = 70;
      legendPerRow = Math.max(Math.floor(gridwidth / (spacing + textWidth)), 1);
      isOddLength = data.length % 2 === 1;
      length = data.length;
      wrapText = this.wrapText;
      maxRows = Math.ceil(length / legendPerRow);
      totalOffset = (maxRows - 1) * rowHeight;
      if (legendPerRow === 1) {
        textWidth = this.width - spacing;
      } else if (legendPerRow >= length) {
        if (gridwidth * 0.8 > (textWidth + spacing) * length) {
          legendOffsetX += (gridwidth - (textWidth + spacing) * length) / 2;
        }
      }
      legendGrp = this.baseGroup.append('g').attr("class", "legend").attr('transform', "translate(" + legendOffsetX + "," + legendOffsetY + ")");
      data.forEach((function(_this) {
        return function(entry, index) {
          var legend, offsetX, offsetY, rect, text;
          offsetX = (index % legendPerRow) * (Math.floor(gridwidth / legendPerRow));
          offsetY = -totalOffset + Math.floor(index / legendPerRow) * rowHeight;
          legend = legendGrp.append('g').attr('transform', "translate(" + offsetX + "," + offsetY + ")");
          rect = legend.append('rect').attr('x', 0).attr('y', 0).attr('fill', colors[index]).attr('width', 8).attr('height', 8);
          return text = legend.append('text').attr('x', 11).attr('y', 8).attr('class', 'legend-text').text(function() {
            return entry.toUpperCase();
          }).each(function() {
            return wrapText(this, textWidth);
          });
        };
      })(this));
      return maxRows * rowHeight;
    };

    Graph.prototype.clear = function() {
      var ref;
      return $((ref = this.baseGroup) != null ? ref[0][0] : void 0).html('');
    };

    Graph.prototype.remove = function() {
      return this.svgEle.remove();
    };

    Graph.prototype.redraw = function() {
      var height, width;
      this.clear();
      this.graphGrp = this.baseGroup.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
      this.render();
      if (this.showGuide) {
        width = this.netWidth - 15 - 15;
        height = this.netHeight - 15 - 15;
        return this.baseGroup.append('rect').attr('width', width).attr('height', height).attr("x", 15).attr("y", 15).style('fill', 'rgba(0,0,0,.2)');
      }
    };

    Graph.prototype.update = function(graphData) {
      this.graphData = graphData;
      this.phaseCount = 0;
      this.redraw();
      return typeof this.onUpdate === "function" ? this.onUpdate() : void 0;
    };

    Graph.prototype.resize = function() {
      this.phaseCount = 0;
      this.redraw();
      return typeof this.onResize === "function" ? this.onResize() : void 0;
    };

    Graph.prototype.render = function() {
      return typeof this.onRender === "function" ? this.onRender() : void 0;
    };

    return Graph;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,