(function() {
  window.app = angular.module('myApp', ["mrWidget", "ngFileUpload", "nlSelectbx", "mrFileUpload", "mrTheme"]);

  app.run([
    "$rootScope", "$http", "mySocket", function($rootScope, $http, mySocket) {
      $rootScope.isBuilder = (window.isBuilder != null) && window.isBuilder === true;
      return $rootScope.isDisplay = (window.isDisplay != null) && window.isDisplay === true;
    }
  ]);

  app.controller("GridController", [
    "$scope", "$rootScope", "$http", "$timeout", "$filter", "mySocket", "server", function($scope, $rootScope, $http, $timeout, $filter, mySocket, server) {
      var entry, formattedDates, getThemeName, i, len;
      $scope.model = {};
      $scope.server = server;
      $scope.themes = [];
      for (i = 0, len = themes.length; i < len; i++) {
        entry = themes[i];
        $scope.themes.push(entry.name);
      }
      getThemeName = function(file) {
        var j, len1;
        for (j = 0, len1 = themes.length; j < len1; j++) {
          entry = themes[j];
          if (entry.file === file.toLowerCase()) {
            return entry.name;
          }
        }
        return '';
      };
      $http.get("/api/widgets/app/all_widgets?history=true&limit=10").success(function(gridData, status, headers, config) {
        var gridList, j, len1, ref;
        gridList = [];
        for (j = 0, len1 = gridData.length; j < len1; j++) {
          entry = gridData[j];
          gridList.push(JSON.parse(entry.value));
        }
        $scope.gridListVersions = gridList;
        $scope.gridList = [gridList[0]];
        $scope.model.selectedTheme = getThemeName(gridList[0].theme);
        $scope.model.selectedThemeFile = gridList[0].theme;
        $scope.gridData = gridData;
        $scope.noOfGrids = $scope.gridData.length;
        $scope.formattedDateForGrid = formattedDates($scope.gridData);
        $scope.model.selectedGridDate = (ref = $scope.formattedDateForGrid) != null ? ref[0] : void 0;
        console.log("Data fetched from server. ", gridList);
      }).error(function(data, status, headers, config) {
        alert("Could not fetch widgets. Something went wrong.");
      });
      formattedDates = function(dataList) {
        var date, j, len1, output;
        output = [];
        for (j = 0, len1 = dataList.length; j < len1; j++) {
          entry = dataList[j];
          date = new Date(entry.lastUpdated);
          output.push($filter('date')(date, "MMM d, hh:mm:ss a"));
        }
        return output;
      };
      $scope.$watch('model.selectedGridDate', function(newVal) {
        var selectedGridData, selectedGridList;
        if (newVal != null) {
          $scope.model.activeGridIndex = $scope.formattedDateForGrid.indexOf(newVal);
          selectedGridList = $scope.gridListVersions[$scope.model.activeGridIndex];
          selectedGridData = $scope.gridData[$scope.model.activeGridIndex];
          $scope.gridList = [selectedGridList];
          if ($scope.model.activeGridIndex !== 0) {
            return server.referenceDate = selectedGridData.lastUpdated;
          } else {
            return server.referenceDate = void 0;
          }
        }
      });
      $scope.$watch('model.selectedTheme', function(newVal, oldVal) {
        var activeGrid, j, len1;
        if ((oldVal != null) && newVal !== oldVal) {
          activeGrid = $scope.gridList[0];
          for (j = 0, len1 = themes.length; j < len1; j++) {
            entry = themes[j];
            if (entry.name === newVal) {
              activeGrid.theme = entry.file;
              $scope.model.selectedThemeFile = entry.file;
            }
          }
          return server.postToQueue('app', 'all_widgets', activeGrid);
        }
      });
      $scope.widgetUpdated = function(newId, oldId) {
        var activeGrid;
        activeGrid = $scope.gridList[0];
        activeGrid.gridData[this.$index].id = newId;
        server.postToQueue('app', 'all_widgets', activeGrid);
      };
      $scope.widgetClass = function(widget) {
        var outputClass;
        outputClass = 'widget-' + widget.type;
        if (!widget.id) {
          outputClass += ' is-empty';
        }
        return outputClass;
      };
      return $scope.publish = function() {
        var activeGrid, onPublish;
        $rootScope.showLoader = true;
        activeGrid = $scope.gridList[0];
        if (activeGrid.length) {
          activeGrid.gridData[0].lastUpdated = Math.floor(Date.now() / 1000);
        }
        server.postToQueue('app', 'all_widgets', activeGrid);
        onPublish = function() {
          $timeout(function() {
            return $rootScope.showLoader = false;
          }, 1000);
        };
        return server.publish(onPublish);
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,