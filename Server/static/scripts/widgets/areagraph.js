(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.AreaGraph = (function(superClass) {
    extend(AreaGraph, superClass);

    AreaGraph.prototype.colors = ['#ec008c', '#b3b3b3', '#249eb2', '#249eb2', '#9ac8e2', '#f2d1d9'];

    function AreaGraph($ele, graphData, chartType, isMultiLayer) {
      this.$ele = $ele;
      this.graphData = graphData;
      this.chartType = chartType != null ? chartType : "Pie";
      this.isMultiLayer = isMultiLayer != null ? isMultiLayer : true;
      this.redrawOnResize = true;
      this.margin = {
        left: 20,
        right: 15,
        top: 15,
        bottom: 20
      };
      AreaGraph.__super__.constructor.call(this, this.$ele, this.graphData);
    }

    AreaGraph.prototype.onRender = function() {
      var ageGroup, area, autoDomainCalc, colorScale, firstTick, grpdGraphData, height, hoverLabel, lastTick, legendHeight, ref, textOffsetCorrection, xAxisTicks, xBar, xDomain, xScale, yAxis, yDomain, yScale, yaxisTextWidth;
      legendHeight = this.drawLegends(this.graphData.labels, this.colors);
      height = this.height - legendHeight - 20;
      yScale = d3.scale.linear().range([height, 0]);
      xScale = d3.scale.linear().range([0, this.width]);
      colorScale = d3.scale.ordinal().range(this.graphData.colors || this.colors);
      hoverLabel = d3.scale.ordinal().range(this.graphData.labels);
      yAxis = d3.svg.axis().scale(yScale).tickSize(-this.width - 5, 0, 0).ticks(5).tickFormat(function(d, index) {
        if (index === 0) {
          return '';
        } else {
          return d;
        }
      }).orient('left');
      xBar = d3.svg.axis().scale(xScale).ticks(this.graphData.data.length - 1).tickSize(height, 0, 0).tickFormat((function(_this) {
        return function(d, index) {
          return _this.graphData.data[index].label.toUpperCase();
        };
      })(this)).orient('bottom');
      grpdGraphData = this.graphData.labels.map((function(_this) {
        return function(n) {
          return _this.graphData.data.map(function(d, i) {
            return {
              x: i,
              y: d[n],
              y0: 0
            };
          });
        };
      })(this));
      d3.layout.stack()(grpdGraphData);
      autoDomainCalc = (function(_this) {
        return function(axis) {
          var callback, isString;
          isString = false;
          if (typeof _this.graphData.data[0][axis] === "string") {
            isString = true;
          }
          callback = function(d, index) {
            var k, sum, v;
            if (isString) {
              return index;
            }
            sum = 0;
            for (k in d) {
              v = d[k];
              if (k === 'label') {
                continue;
              }
              sum += v;
            }
            return sum;
          };
          return [0, d3.max(_this.graphData.data, callback) * 1.1];
        };
      })(this);
      xDomain = [0, this.graphData.data.length - 1];
      yDomain = autoDomainCalc('y');
      xScale.domain(xDomain);
      yScale.domain(yDomain);
      this.graphGrp.append('g').attr('class', 'xaxis').attr('transform', 'translate(0,' + 0 + ')').call(xBar);
      this.graphGrp.append('g').attr('class', 'yaxis').call(yAxis);
      if (this.phaseCount === 0) {
        this.phaseCount = 1;
        yaxisTextWidth = [];
        this.graphGrp.selectAll('g.yaxis').selectAll('text').each(function() {
          var self, textLength;
          self = d3.select(this);
          textLength = self.node().getComputedTextLength();
          yaxisTextWidth.push(textLength);
        });
        textOffsetCorrection = d3.max(yaxisTextWidth);
        this.margin.left = this.marginOriginal.left + textOffsetCorrection;
        this.width = this.widthOriginal - textOffsetCorrection / 2.0;
        this.resetDimension();
        this.redraw();
        return;
      }
      this.phaseCount = 0;
      area = d3.svg.area().x(function(d) {
        return xScale(d.x);
      }).y0(function(d) {
        return yScale(d.y0);
      }).y1(function(d) {
        return yScale(d.y + d.y0);
      });
      ageGroup = this.graphGrp.selectAll('.valgroup').data(grpdGraphData).enter().append('g').attr('class', 'valgroup').style('fill', function(d, i) {
        return colorScale(i);
      }).attr('class', function(d, i) {
        return hoverLabel(i);
      });
      ageGroup.append('path').attr('d', function(d) {
        return area(d);
      });
      xAxisTicks = this.svgEle.selectAll('.xaxis .tick line');
      ref = xAxisTicks[0], firstTick = ref[0], lastTick = ref[ref.length - 1];
      d3.select(firstTick).attr("transform", "translate(1,0)");
      return d3.select(lastTick).attr("transform", "translate(-1,0)");
    };

    return AreaGraph;

  })(Graph);

}).call(this);

//# sourceMappingURL=data:application/json;base64,