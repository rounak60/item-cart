(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.PieGraph = (function(superClass) {
    extend(PieGraph, superClass);

    PieGraph.prototype.colors = ['#249EB2', '#b3b3b3', '#9DA2D8', '#e9746d', '#9ac8e2', '#f2d1d9'];

    PieGraph.prototype.chartType = "DoughNut";

    PieGraph.prototype.isMultiLayer = true;

    function PieGraph($ele, graphData, chartType, isMultiLayer) {
      this.$ele = $ele;
      this.graphData = graphData;
      this.chartType = chartType != null ? chartType : "Pie";
      this.isMultiLayer = isMultiLayer != null ? isMultiLayer : true;
      this.redrawOnResize = true;
      this.margin = {
        left: 15,
        right: 15,
        top: 15,
        bottom: 15
      };
      if (this.isMultiLayer) {
        this.margin.bottom = 45;
      }
      PieGraph.__super__.constructor.call(this, this.$ele, this.graphData);
    }

    PieGraph.prototype.drawLegends = function(data, colors) {
      var gridwidth, isOddLength, legendGrp, legendOffsetX, legendOffsetY, legendPerRow, legendWidth, length, maxRows, rowHeight, spacing, textWidth, totalOffset, wrapText;
      legendOffsetY = this.netHeight - this.widgetPadding.top - 8;
      legendOffsetX = this.widgetPadding.left;
      gridwidth = this.netWidth - this.widgetPadding.left - this.widgetPadding.right;
      spacing = 40;
      rowHeight = 15;
      textWidth = 50;
      legendPerRow = Math.max(Math.floor(gridwidth / (spacing + textWidth)), 1);
      legendWidth = Math.floor(gridwidth / legendPerRow);
      isOddLength = data.length % 2 === 1;
      length = data.length;
      wrapText = this.wrapText;
      maxRows = Math.ceil(length / legendPerRow);
      totalOffset = (maxRows - 1) * rowHeight;
      if (legendPerRow === 1) {
        textWidth = this.width - spacing;
      } else if (legendPerRow >= length) {
        if (gridwidth * 0.5 > (textWidth + spacing) * length) {
          legendOffsetX += (gridwidth - (textWidth + spacing) * length) / 2;
        }
      }
      legendGrp = this.baseGroup.append('g').attr("class", "legend").attr('transform', "translate(" + legendOffsetX + "," + legendOffsetY + ")");
      data.forEach((function(_this) {
        return function(entry, index) {
          var legend, offsetX, offsetY, rect, text;
          offsetX = (index % legendPerRow) * legendWidth;
          offsetY = -totalOffset + Math.floor(index / legendPerRow) * rowHeight;
          legend = legendGrp.append('g').attr('transform', "translate(" + offsetX + "," + offsetY + ")");
          rect = legend.append('rect').attr('x', 0).attr('y', 0).attr('fill', colors[index]).attr('width', 8).attr('height', 8);
          return text = legend.append('text').attr('x', 11).attr('y', 8).attr('class', 'legend-text').text(function() {
            return entry.label.toUpperCase();
          }).each(function() {
            return wrapText(this, legendWidth - spacing);
          }).text(function() {
            return d3.select(this).text() + (" (" + entry.d + ")");
          });
        };
      })(this));
      return maxRows * rowHeight;
    };

    PieGraph.prototype.onRender = function() {
      var colorScale, data, entry, height, innerArr, inputData, j, k, legendHeight, len, len1, spacing, width;
      this.baseGroup.attr("transform", "");
      spacing = 25;
      colorScale = d3.scale.ordinal().range(this.graphData.colors || this.colors);
      inputData = this.graphData.data;
      data = [];
      this.graphDirection = this.width > this.height ? 'horizontal' : "vertical";
      if (this.isMultiLayer) {
        innerArr = [];
        for (j = 0, len = inputData.length; j < len; j++) {
          entry = inputData[j];
          innerArr.push(entry);
        }
        data.push(innerArr);
        legendHeight = this.drawLegends(data[0], this.colors);
        height = this.height - legendHeight + 30;
        width = this.width;
      } else {
        for (k = 0, len1 = inputData.length; k < len1; k++) {
          entry = inputData[k];
          data.push(entry);
        }
        if (this.graphDirection === 'horizontal') {
          width = (this.width - (data.length - 1) * spacing) / data.length;
          height = this.height;
        } else {
          height = (this.height - (data.length - 1) * spacing) / data.length;
          width = this.width;
        }
      }
      return data.forEach((function(_this) {
        return function(chartData, index) {
          var arc, dataInArray, diameter, doughNutValue, graphHeight, grp, l, len2, offset, path, pie, piechartValue, progresstextHeight, temp, textOffset, textOffsetY, total, value;
          dataInArray = [];
          total = 0;
          dataInArray = [];
          if (_this.chartType === 'DoughNut') {
            temp = parseInt(chartData.d, 10);
            dataInArray = [temp, 100 - temp];
          } else {
            for (l = 0, len2 = chartData.length; l < len2; l++) {
              entry = chartData[l];
              value = parseInt(entry.d, 10);
              total += value;
              dataInArray.push(value);
            }
          }
          pie = d3.layout.pie().sort(null);
          arc = d3.svg.arc().outerRadius(_this.radius);
          if (_this.chartType === 'DoughNut') {
            arc.innerRadius(_this.radius * 0.7);
          }
          if (_this.isMultiLayer) {
            graphHeight = height - 17;
            diameter = Math.min(width, graphHeight);
            _this.radius = diameter / 2.0;
            offset = [index * (width + spacing) + (width / 2.0) + _this.margin.left, _this.margin.top + graphHeight / 2.0];
          } else {
            graphHeight = height - 22;
            if (_this.graphDirection === 'horizontal') {
              diameter = Math.min(width, graphHeight);
              spacing = (_this.netWidth - diameter * data.length) / (data.length + 1);
              _this.radius = diameter / 2.0;
              offset = [index * (diameter + spacing) + spacing + (diameter / 2.0), graphHeight / 2.0 + _this.margin.top];
            } else {
              diameter = Math.min(width, graphHeight);
              _this.radius = diameter / 2.0;
              offset = [_this.netWidth / 2.0, index * (height + spacing) + (graphHeight / 2.0) + _this.margin.top];
            }
          }
          grp = _this.baseGroup.append('g').attr("transform", "translate(" + offset[0] + "," + offset[1] + ")");
          path = grp.selectAll('path').data(pie(dataInArray)).enter().append('path').attr('class', function(d, i) {
            if (!_this.isMultiLayer && i === 1) {
              return 'piegraph-bg';
            }
            return '';
          }).attr('fill', function(d, i) {
            var color, ref;
            if (_this.isMultiLayer) {
              color = chartData[i].color;
              if ((color != null ? color.value : void 0) != null) {
                return color.value;
              }
              return colorScale(i);
            } else {
              if (i === 0) {
                if (((ref = chartData.color) != null ? ref.value : void 0) != null) {
                  return chartData.color.value;
                }
                return colorScale(i);
              }
              return '';
            }
          }).attr('d', arc);
          if (_this.chartType === 'DoughNut') {
            doughNutValue = grp.append('g').classed('piechart-progress', true);
            doughNutValue.append('text').attr('text-anchor', 'middle').style('fill', colorScale[0]).style('alignment-baseline', "before-edge").attr('class', 'piechart-progresstext').attr({
              'y': -0
            }).text(function(entry, i) {
              if (_this.isMultiLayer) {
                return '';
              }
              return chartData.d + '%';
            });
            progresstextHeight = doughNutValue.select('text').node().getBoundingClientRect().height;
            doughNutValue.append('text').attr('text-anchor', 'middle').style('fill', colorScale[0]).style('alignment-baseline', "before-edge").attr('class', 'piechart-progresssubtext').attr('y', progresstextHeight).text(function(entry, i) {
              var subtext;
              if (_this.isMultiLayer) {
                return '';
              }
              subtext = (chartData.subtext != null) && chartData.subtext !== '' ? chartData.subtext : '';
              return subtext;
            });
            textOffsetY = {};
            doughNutValue.each(function(d, i) {
              return textOffsetY[i] = this.getBBox().height / 2;
            }).attr({
              transform: function(d, i) {
                return 'translate(0,-' + textOffsetY[i] + ')';
              }
            });
          } else {
            piechartValue = grp.selectAll('.piechart-value').data(pie(dataInArray)).enter();
            piechartValue.append('svg:text').attr('transform', function(d) {
              d.innerRadius = 0;
              d.outerRadius = this.radius;
              return 'translate(' + arc.centroid(d) + ')';
            }).style('text-anchor', 'middle').text(function(d, i) {
              if (total > 0 && (d.value * 100 / total > 10)) {
                return d.value;
              } else {
                return '';
              }
            }).attr('fill', '#fff').classed('piechart-value', true);
            textOffset = grp.select('.piechart-value').node().getBoundingClientRect().height / 2;
            piechartValue.append('svg:text').attr('transform', function(d) {
              d.innerRadius = 0;
              d.outerRadius = this.radius;
              return 'translate(' + arc.centroid(d) + ')';
            }).attr({
              'y': textOffset
            }).style('text-anchor', 'middle').style('alignment-baseline', 'before-edge').text(function(d, i) {
              var subtext;
              subtext = chartData[i].subtext;
              if ((subtext != null) && subtext !== '') {
                if (total > 0 && (d.value * 100 / total > 10)) {
                  return subtext;
                } else {
                  return '';
                }
              }
              return '';
            }).attr('fill', '#fff').classed('piechart-subtext', true);
          }
          if (!_this.isMultiLayer) {
            return grp.append('text').attr('transform', "translate(0," + (_this.radius + _this.margin.top + 5) + ")").attr('class', 'piechart-labels').attr('text-anchor', 'middle').text(function(d, i) {
              return chartData.label;
            });
          }
        };
      })(this));
    };

    return PieGraph;

  })(Graph);

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndpZGdldHMvcGllZ3JhcGguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTsrQkFBQTs7QUFBQSxFQUFNLE1BQU0sQ0FBQztBQUNULGdDQUFBLENBQUE7O0FBQUEsdUJBQUEsTUFBQSxHQUFTLENBQ0wsU0FESyxFQUVMLFNBRkssRUFHTCxTQUhLLEVBSUwsU0FKSyxFQUtMLFNBTEssRUFNTCxTQU5LLENBQVQsQ0FBQTs7QUFBQSx1QkFTQSxTQUFBLEdBQVcsVUFUWCxDQUFBOztBQUFBLHVCQVVBLFlBQUEsR0FBZSxJQVZmLENBQUE7O0FBY1ksSUFBQSxrQkFBQyxJQUFELEVBQU8sU0FBUCxFQUFrQixTQUFsQixFQUFtQyxZQUFuQyxHQUFBO0FBRVIsTUFGUyxJQUFDLENBQUEsT0FBRCxJQUVULENBQUE7QUFBQSxNQUZlLElBQUMsQ0FBQSxZQUFELFNBRWYsQ0FBQTtBQUFBLE1BRjBCLElBQUMsQ0FBQSxnQ0FBRCxZQUFXLEtBRXJDLENBQUE7QUFBQSxNQUYyQyxJQUFDLENBQUEsc0NBQUQsZUFBYyxJQUV6RCxDQUFBO0FBQUEsTUFBQSxJQUFDLENBQUEsY0FBRCxHQUFrQixJQUFsQixDQUFBO0FBQUEsTUFDQSxJQUFDLENBQUEsTUFBRCxHQUFXO0FBQUEsUUFDUCxJQUFBLEVBQVMsRUFERjtBQUFBLFFBRVAsS0FBQSxFQUFTLEVBRkY7QUFBQSxRQUdQLEdBQUEsRUFBUyxFQUhGO0FBQUEsUUFJUCxNQUFBLEVBQVMsRUFKRjtPQURYLENBQUE7QUFTQSxNQUFBLElBQUcsSUFBQyxDQUFBLFlBQUo7QUFDSSxRQUFBLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBUixHQUFpQixFQUFqQixDQURKO09BVEE7QUFBQSxNQVlBLDBDQUFNLElBQUMsQ0FBQSxJQUFQLEVBQVksSUFBQyxDQUFBLFNBQWIsQ0FaQSxDQUZRO0lBQUEsQ0FkWjs7QUFBQSx1QkErQkEsV0FBQSxHQUFZLFNBQUMsSUFBRCxFQUFNLE1BQU4sR0FBQTtBQUVSLFVB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RUFha0IsTUFibEIsQ0FheUIsQ0FBQyxPQWIxQixDQWFrQyxrQkFibEMsRUFhc0QsSUFidEQsQ0FkQSxDQW5DSjtXQTNFQTtBQTZJQSxVQUFBLElBQUcsQ0FBQSxLQUFLLENBQUEsWUFBUjttQkFFSSxHQUFHLENBQUMsTUFBSixDQUFXLE1BQVgsQ0FDSSxDQUFDLElBREwsQ0FDVSxXQURWLEVBQ3VCLGNBQUEsR0FBYyxDQUFDLEtBQUMsQ0FBQSxNQUFELEdBQVEsS0FBQyxDQUFBLE1BQU0sQ0FBQyxHQUFoQixHQUFvQixDQUFyQixDQUFkLEdBQXFDLEdBRDVELENBRUksQ0FBQyxJQUZMLENBRVUsT0FGVixFQUVtQixpQkFGbkIsQ0FHSSxDQUFDLElBSEwsQ0FHVSxhQUhWLEVBR3lCLFFBSHpCLENBR2tDLENBQUMsSUFIbkMsQ0FHd0MsU0FBQyxDQUFELEVBQUksQ0FBSixHQUFBO0FBQ2hDLHFCQUFPLFNBQVMsQ0FBQyxLQUFqQixDQURnQztZQUFBLENBSHhDLEVBRko7V0EvSVM7UUFBQSxFQUFBO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFiLEVBcENNO0lBQUEsQ0EzRlYsQ0FBQTs7b0JBQUE7O0tBRDBCLE1BQTlCLENBQUE7QUFBQSIsImZpbGUiOiJ3aWRnZXRzL3BpZWdyYXBoLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3Mgd2luZG93LlBpZUdyYXBoIGV4dGVuZHMgR3JhcGhcbiAgICBjb2xvcnMgOiBbXG4gICAgICAgICcjMjQ5RUIyJ1xuICAgICAgICAnI2IzYjNiMydcbiAgICAgICAgJyM5REEyRDgnXG4gICAgICAgICcjZTk3NDZkJ1xuICAgICAgICAnIzlhYzhlMidcbiAgICAgICAgJyNmMmQxZDknXG4gICAgXVxuXG4gICAgY2hhcnRUeXBlOiBcIkRvdWdoTnV0XCJcbiAgICBpc011bHRpTGF5ZXIgOiB0cnVlXG5cblxuXG4gICAgY29uc3RydWN0b3I6KEAkZWxlLEBncmFwaERhdGEsQGNoYXJ0VHlwZT1cIlBpZVwiLEBpc011bHRpTGF5ZXI9dHJ1ZSktPlxuXG4gICAgICAgIEByZWRyYXdPblJlc2l6ZSA9IHRydWVcbiAgICAgICAgQG1hcmdpbiA9ICB7XG4gICAgICAgICAgICBsZWZ0ICAgOiAxNVxuICAgICAgICAgICAgcmlnaHQgIDogMTVcbiAgICAgICAgICAgIHRvcCAgICA6IDE1XG4gICAgICAgICAgICBib3R0b20gOiAxNVxuICAgICAgICB9XG5cblxuICAgICAgICBpZiBAaXNNdWx0aUxheWVyXG4gICAgICAgICAgICBAbWFyZ2luLmJvdHRvbSA9IDQ1XG5cbiAgICAgICAgc3VwZXIgQCRlbGUsQGdyYXBoRGF0YVxuXG5cbiAgICBkcmF3TGVnZW5kczooZGF0YSxjb2xvcnMpLT5cblxuICAgICAgICBsZWdlbmRPZmZzZXRZID0gQG5ldEhlaWdodC1Ad2lkZ2V0UGFkZGluZy50b3AtOFxuICAgICAgICBsZWdlbmRPZmZzZXRYID0gQHdpZGdldFBhZGRpbmcubGVmdFxuXG4gICAgICAgIGdyaWR3aWR0aCAgICAgPSBAbmV0V2lkdGggLSBAd2lkZ2V0UGFkZGluZy5sZWZ0IC0gQHdpZGdldFBhZGRpbmcucmlnaHRcblxuICAgICAgICBzcGFjaW5nICAgICAgID0gNDBcbiAgICAgICAgcm93SGVpZ2h0ICAgICA9IDE1XG4gICAgICAgIHRleHRXaWR0aCAgICAgPSA1MFxuICAgICAgICBsZWdlbmRQZXJSb3cgID0gTWF0aC5tYXgoTWF0aC5mbG9vcihncmlkd2lkdGgvKHNwYWNpbmcrdGV4dFdpZHRoKSksMSlcbiAgICAgICAgbGVnZW5kV2lkdGggICA9IE1hdGguZmxvb3IoZ3JpZHdpZHRoL2xlZ2VuZFBlclJvdylcbiAgICAgICAgaXNPZGRMZW5ndGggICA9IChkYXRhLmxlbmd0aCAlIDIgaXMgMSlcbiAgICAgICAgbGVuZ3RoICAgICAgICA9IGRhdGEubGVuZ3RoXG4gICAgICAgIHdyYXBUZXh0ICAgICAgPSBAd3JhcFRleHRcbiAgICAgICAgbWF4Um93cyAgICAgICA9IE1hdGguY2VpbChsZW5ndGgvbGVnZW5kUGVyUm93KVxuICAgICAgICB0b3RhbE9mZnNldCAgID0gKG1heFJvd3MtMSkqcm93SGVpZ2h0XG5cblxuXG5cbiAgICAgICAgaWYgbGVnZW5kUGVyUm93IGlzIDFcbiAgICAgICAgICAgIHRleHRXaWR0aCA9IEB3aWR0aCAtIHNwYWNpbmdcbiAgICAgICAgZWxzZSBpZiBsZWdlbmRQZXJSb3cgPj0gbGVuZ3RoXG4gICAgICAgICAgICAjIGNlbnRlciBpdFxuICAgICAgICAgICAgaWYgZ3JpZHdpZHRoICogMC41ID4gKHRleHRXaWR0aCtzcGFjaW5nKSpsZW5ndGhcbiAgICAgICAgICAgICAgICBsZWdlbmRPZmZzZXRYICs9IChncmlkd2lkdGggLSAodGV4dFdpZHRoK3NwYWNpbmcpKmxlbmd0aCkvMlxuXG4gICAgICAgIGxlZ2VuZEdycCA9IEBiYXNlR3JvdXAuYXBwZW5kKCdnJykuYXR0cihcImNsYXNzXCIsXCJsZWdlbmRcIikuYXR0cigndHJhbnNmb3JtJyxcInRyYW5zbGF0ZSgje2xlZ2VuZE9mZnNldFh9LCN7bGVnZW5kT2Zmc2V0WX0pXCIpXG5cbiAgICAgICAgZGF0YS5mb3JFYWNoIChlbnRyeSwgaW5kZXgpPT5cblxuICAgICAgICAgICAgb2Zmc2V0WCA9IChpbmRleCVsZWdlbmRQZXJSb3cpKmxlZ2VuZFdpZHRoXG5cbiAgICAgICAgICAgIG9mZnNldFkgPSAtdG90YWxPZmZzZXQgKyBNYXRoLmZsb29yKGluZGV4L2xlZ2VuZFBlclJvdykqcm93SGVpZ2h0XG5cbiAgICAgICAgICAgIGxlZ2VuZCA9IGxlZ2VuZEdycC5hcHBlbmQoJ2cnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLFwidHJhbnNsYXRlKCN7b2Zmc2V0WH0sI3tvZmZzZXRZfSlcIilcblxuICAgICAgICAgICAgcmVjdCA9IGxlZ2VuZC5hcHBlbmQoJ3JlY3QnKS5hdHRyKCd4JywgMCkuYXR0cigneScsIDApXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCBjb2xvcnNbaW5kZXhdIClcbiAgICAgICAgICAgICAgICAuYXR0cignd2lkdGgnLDgpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsOClcblxuICAgICAgICAgICAgdGV4dCA9IGxlZ2VuZC5hcHBlbmQoJ3RleHQnKS5hdHRyKCd4JywgMTEpLmF0dHIoJ3knLCA4KVxuICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsJ2xlZ2VuZC10ZXh0JylcbiAgICAgICAgICAgICAgICAudGV4dCgtPlxuICAgICAgICAgICAgICAgICAgICAjIHRoaXMgZm9yIGVsbGlwc2lzXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LmxhYmVsLnRvVXBwZXJDYXNlKClcbiAgICAgICAgICAgICAgICApLmVhY2goLT5cbiAgICAgICAgICAgICAgICAgICAgd3JhcFRleHQodGhpcyxsZWdlbmRXaWR0aC1zcGFjaW5nKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAudGV4dCgtPlxuICAgICAgICAgICAgICAgICAgICAjIHdpdGggdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnRleHQoKStcIiAoI3tlbnRyeS5kfSlcIlxuICAgICAgICAgICAgICAgIClcblxuXG4gICAgICAgIHJldHVybiBtYXhSb3dzKnJvd0hlaWdodFxuXG4gICAgb25SZW5kZXI6IC0+XG5cbiAgICAgICAgQGJhc2VHcm91cC5hdHRyKFwidHJhbnNmb3JtXCIsIFwiXCIpXG5cbiAgICAgICAgc3BhY2luZyAgICAgICAgID0gMjVcbiAgICAgICAgY29sb3JTY2FsZSAgICAgID0gZDMuc2NhbGUub3JkaW5hbCgpLnJhbmdlKEBncmFwaERhdGEuY29sb3JzIHx8IEBjb2xvcnMpXG4gICAgICAgIGlucHV0RGF0YSAgICAgICA9IEBncmFwaERhdGEuZGF0YVxuICAgICAgICBkYXRhICAgICAgICAgICAgPSBbXVxuICAgICAgICBAZ3JhcGhEaXJlY3Rpb24gPSBpZiBAd2lkdGggPiBAaGVpZ2h0IHRoZW4gJ2hvcml6b250YWwnIGVsc2UgXCJ2ZXJ0aWNhbFwiXG5cblxuICAgICAgICBpZiBAaXNNdWx0aUxheWVyXG4gICAgICAgICAgICBpbm5lckFyciA9IFtdXG4gICAgICAgICAgICBmb3IgZW50cnkgaW4gaW5wdXREYXRhXG4gICAgICAgICAgICAgICAgaW5uZXJBcnIucHVzaCBlbnRyeVxuICAgICAgICAgICAgZGF0YS5wdXNoIGlubmVyQXJyXG5cbiAgICAgICAgICAgIGxlZ2VuZEhlaWdodCA9IEBkcmF3TGVnZW5kcyhkYXRhWzBdLEBjb2xvcnMpXG5cbiAgICAgICAgICAgIGhlaWdodCA9IEBoZWlnaHQtbGVnZW5kSGVpZ2h0KzMwXG4gICAgICAgICAgICB3aWR0aCA9IEB3aWR0aFxuXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGZvciBlbnRyeSBpbiBpbnB1dERhdGFcbiAgICAgICAgICAgICAgICBkYXRhLnB1c2ggZW50cnlcblxuXG4gICAgICAgICAgICBpZiBAZ3JhcGhEaXJlY3Rpb24gaXMgJ2hvcml6b250YWwnXG4gICAgICAgICAgICAgICAgd2lkdGggPSAoQHdpZHRoLShkYXRhLmxlbmd0aC0xKSpzcGFjaW5nKS9kYXRhLmxlbmd0aFxuICAgICAgICAgICAgICAgIGhlaWdodCA9IEBoZWlnaHRcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSAoQGhlaWdodC0oZGF0YS5sZW5ndGgtMSkqc3BhY2luZykvZGF0YS5sZW5ndGhcbiAgICAgICAgICAgICAgICB3aWR0aCA9IEB3aWR0aFxuXG5cblxuICAgICAgICBkYXRhLmZvckVhY2ggKGNoYXJ0RGF0YSxpbmRleCk9PlxuXG4gICAgICAgICAgICBkYXRhSW5BcnJheSA9IFtdXG4gICAgICAgICAgICB0b3RhbCA9IDBcblxuICAgICAgICAgICAgZGF0YUluQXJyYXkgPSBbXVxuICAgICAgICAgICAgaWYgQGNoYXJ0VHlwZSBpcyAnRG91Z2hOdXQnXG4gICAgICAgICAgICAgICAgdGVtcCA9IHBhcnNlSW50KGNoYXJ0RGF0YS5kLDEwKVxuICAgICAgICAgICAgICAgIGRhdGFJbkFycmF5ID0gW3RlbXAsKDEwMC10ZW1wKV1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBmb3IgZW50cnkgaW4gY2hhcnREYXRhXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyc2VJbnQoZW50cnkuZCwxMClcbiAgICAgICAgICAgICAgICAgICAgdG90YWwgKz0gdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgZGF0YUluQXJyYXkucHVzaCB2YWx1ZVxuXG5cblxuICAgICAgICAgICAgcGllID0gZDMubGF5b3V0LnBpZSgpXG4gICAgICAgICAgICAgICAgLnNvcnQobnVsbClcblxuICAgICAgICAgICAgYXJjID0gZDMuc3ZnLmFyYygpXG4gICAgICAgICAgICAgICAgLm91dGVyUmFkaXVzKEByYWRpdXMpXG5cbiAgICAgICAgICAgIGlmIEBjaGFydFR5cGUgaXMgJ0RvdWdoTnV0J1xuICAgICAgICAgICAgICAgIGFyYy5pbm5lclJhZGl1cyhAcmFkaXVzKjAuNylcblxuXG5cbiAgICAgICAgICAgIGlmIEBpc011bHRpTGF5ZXJcbiAgICAgICAgICAgICAgICBncmFwaEhlaWdodCA9IGhlaWdodCAtIDE3XG4gICAgICAgICAgICAgICAgZGlhbWV0ZXIgICA9IE1hdGgubWluKHdpZHRoLCBncmFwaEhlaWdodClcbiAgICAgICAgICAgICAgICBAcmFkaXVzICAgICA9IGRpYW1ldGVyIC8gMi4wXG5cbiAgICAgICAgICAgICAgICBvZmZzZXQgPSAgWyAoaW5kZXgqKHdpZHRoK3NwYWNpbmcpICsgKHdpZHRoLzIuMCkgKyBAbWFyZ2luLmxlZnQpLCBAbWFyZ2luLnRvcCArIGdyYXBoSGVpZ2h0LzIuMCBdXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgZ3JhcGhIZWlnaHQgPSBoZWlnaHQgLSAyMlxuXG4gICAgICAgICAgICAgICAgaWYgQGdyYXBoRGlyZWN0aW9uIGlzICdob3Jpem9udGFsJ1xuICAgICAgICAgICAgICAgICAgICBkaWFtZXRlciAgID0gTWF0aC5taW4od2lkdGgsIGdyYXBoSGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICBzcGFjaW5nID0gKEBuZXRXaWR0aC1kaWFtZXRlcipkYXRhLmxlbmd0aCkvKGRhdGEubGVuZ3RoKzEpXG4gICAgICAgICAgICAgICAgICAgIEByYWRpdXMgICAgID0gZGlhbWV0ZXIgLyAyLjBcblxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAgWyAoaW5kZXgqKGRpYW1ldGVyK3NwYWNpbmcpICsgc3BhY2luZyArIChkaWFtZXRlci8yLjApICksIGdyYXBoSGVpZ2h0LzIuMCArIEBtYXJnaW4udG9wIF1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGRpYW1ldGVyICAgPSBNYXRoLm1pbih3aWR0aCwgZ3JhcGhIZWlnaHQpXG4gICAgICAgICAgICAgICAgICAgIEByYWRpdXMgICAgID0gZGlhbWV0ZXIgLyAyLjBcblxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAgWyBAbmV0V2lkdGgvMi4wICwgKGluZGV4KihoZWlnaHQrc3BhY2luZykgKyAoZ3JhcGhIZWlnaHQvMi4wKSArIEBtYXJnaW4udG9wKSBdXG5cbiAgICAgICAgICAgIGdycCA9IEBiYXNlR3JvdXAuYXBwZW5kKCdnJykuYXR0cihcInRyYW5zZm9ybVwiLCBcIlwiXCJ0cmFuc2xhdGUoI3tvZmZzZXRbMF19LCN7b2Zmc2V0WzFdfSlcIlwiXCIpXG4gICAgICAgICAgICBwYXRoID0gZ3JwLnNlbGVjdEFsbCgncGF0aCcpXG4gICAgICAgICAgICAgICAgLmRhdGEocGllKGRhdGFJbkFycmF5KSlcbiAgICAgICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsKGQsaSk9PlxuXG4gICAgICAgICAgICAgICAgICAgIGlmIG5vdCBAaXNNdWx0aUxheWVyIGFuZCBpIGlzIDFcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAncGllZ3JhcGgtYmcnXG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnXG5cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCAoZCwgaSkgPT5cbiAgICAgICAgICAgICAgICAgICAgaWYgQGlzTXVsdGlMYXllclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IgPSBjaGFydERhdGFbaV0uY29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGNvbG9yPy52YWx1ZT9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29sb3IudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2xvclNjYWxlIGlcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgaSBpcyAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgY2hhcnREYXRhLmNvbG9yPy52YWx1ZT9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoYXJ0RGF0YS5jb2xvci52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2xvclNjYWxlKGkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgICAgICAgICApLmF0dHIoJ2QnLCBhcmMpXG5cblxuICAgICAgICAgICAgaWYgQGNoYXJ0VHlwZSBpcyAnRG91Z2hOdXQnXG4gICAgICAgICAgICAgICAgZG91Z2hOdXRWYWx1ZSA9IGdycC5hcHBlbmQoJ2cnKS5jbGFzc2VkKCdwaWVjaGFydC1wcm9ncmVzcycsdHJ1ZSlcbiAgICAgICAgICAgICAgICBkb3VnaE51dFZhbHVlLmFwcGVuZCgndGV4dCcpLmF0dHIoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgY29sb3JTY2FsZVswXSlcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ2FsaWdubWVudC1iYXNlbGluZScsIFwiYmVmb3JlLWVkZ2VcIilcbiAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAncGllY2hhcnQtcHJvZ3Jlc3N0ZXh0JylcbiAgICAgICAgICAgICAgICAuYXR0cigneSc6LTApXG4gICAgICAgICAgICAgICAgLnRleHQgKGVudHJ5LCBpKSA9PlxuICAgICAgICAgICAgICAgICAgICBpZiBAaXNNdWx0aUxheWVyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoYXJ0RGF0YS5kKyclJ1xuXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3N0ZXh0SGVpZ2h0ID0gZG91Z2hOdXRWYWx1ZS5zZWxlY3QoJ3RleHQnKS5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0XG4gICAgICAgICAgICAgICAgZG91Z2hOdXRWYWx1ZS5hcHBlbmQoJ3RleHQnKS5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgICAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIGNvbG9yU2NhbGVbMF0pXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdhbGlnbm1lbnQtYmFzZWxpbmUnLCBcImJlZm9yZS1lZGdlXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3BpZWNoYXJ0LXByb2dyZXNzc3VidGV4dCcpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3knLCBwcm9ncmVzc3RleHRIZWlnaHQpXG4gICAgICAgICAgICAgICAgLnRleHQgKGVudHJ5LCBpKSA9PlxuICAgICAgICAgICAgICAgICAgICBpZiBAaXNNdWx0aUxheWVyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgICAgICAgICAgICAgIyBpZiAkLmlzTnVtZXJpYyhjaGFydERhdGEuc3VidGV4dClcbiAgICAgICAgICAgICAgICAgICAgIyAgICAgc3VidGV4dCA9IHBhcnNlSW50KGNoYXJ0RGF0YS5zdWJ0ZXh0KVxuICAgICAgICAgICAgICAgICAgICAjICAgICByZXR1cm4gaWYgc3VidGV4dCA+IDAgdGhlbiAnKycgKyBzdWJ0ZXh0ICsgJyUnIGVsc2Ugc3VidGV4dCArICclJ1xuXG4gICAgICAgICAgICAgICAgICAgIHN1YnRleHQgPSBpZiAoY2hhcnREYXRhLnN1YnRleHQ/IGFuZCBjaGFydERhdGEuc3VidGV4dCAhPSAnJykgdGhlbiBjaGFydERhdGEuc3VidGV4dCBlbHNlICcnXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdWJ0ZXh0XG5cbiAgICAgICAgICAgICAgICB0ZXh0T2Zmc2V0WSA9IHt9XG4gICAgICAgICAgICAgICAgZG91Z2hOdXRWYWx1ZS5lYWNoIChkLGkpIC0+XG4gICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXRZW2ldID0gdGhpcy5nZXRCQm94KCkuaGVpZ2h0IC8gMlxuICAgICAgICAgICAgICAgIC5hdHRyIHRyYW5zZm9ybTogKGQsaSktPlxuICAgICAgICAgICAgICAgICAgICAndHJhbnNsYXRlKDAsLScgKyB0ZXh0T2Zmc2V0WVtpXSArICcpJ1xuXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcGllY2hhcnRWYWx1ZSA9IGdycC5zZWxlY3RBbGwoJy5waWVjaGFydC12YWx1ZScpLmRhdGEocGllKGRhdGFJbkFycmF5KSkuZW50ZXIoKVxuICAgICAgICAgICAgICAgIHBpZWNoYXJ0VmFsdWUuYXBwZW5kKCdzdmc6dGV4dCcpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAoZCkgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgIGQuaW5uZXJSYWRpdXMgPSAwXG4gICAgICAgICAgICAgICAgICAgICAgICBkLm91dGVyUmFkaXVzID0gQHJhZGl1c1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3RyYW5zbGF0ZSgnICsgYXJjLmNlbnRyb2lkKGQpICsgJyknKVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgICAgICAgICAgICAgICAgIC50ZXh0KChkLCBpKSAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgIyBwYXJzZUludChkLnZhbHVlICogMTAwIC8gdG90YWwpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiB0b3RhbCA+IDAgYW5kIChkLnZhbHVlICogMTAwIC8gdG90YWwgPiAxMCkgdGhlbiBkLnZhbHVlIGVsc2UgJycpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgJyNmZmYnKS5jbGFzc2VkICdwaWVjaGFydC12YWx1ZScsIHRydWVcblxuICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgPSBncnAuc2VsZWN0KCcucGllY2hhcnQtdmFsdWUnKS5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IC8gMlxuXG4gICAgICAgICAgICAgICAgcGllY2hhcnRWYWx1ZS5hcHBlbmQoJ3N2Zzp0ZXh0JylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIChkKSAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgZC5pbm5lclJhZGl1cyA9IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIGQub3V0ZXJSYWRpdXMgPSBAcmFkaXVzXG4gICAgICAgICAgICAgICAgICAgICAgICAndHJhbnNsYXRlKCcgKyBhcmMuY2VudHJvaWQoZCkgKyAnKScpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5Jzp0ZXh0T2Zmc2V0KVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnYWxpZ25tZW50LWJhc2VsaW5lJywgJ2JlZm9yZS1lZGdlJylcbiAgICAgICAgICAgICAgICAgICAgLnRleHQoKGQsIGkpIC0+XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJ0ZXh0ID0gY2hhcnREYXRhW2ldLnN1YnRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHN1YnRleHQ/IGFuZCBzdWJ0ZXh0ICE9ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlmIHRvdGFsID4gMCBhbmQgKGQudmFsdWUgKiAxMDAgLyB0b3RhbCA+IDEwKSB0aGVuIHN1YnRleHQgZWxzZSAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZmlsbCcsICcjZmZmJykuY2xhc3NlZCAncGllY2hhcnQtc3VidGV4dCcsIHRydWVcblxuXG5cbiAgICAgICAgICAgIGlmIG5vdCBAaXNNdWx0aUxheWVyXG5cbiAgICAgICAgICAgICAgICBncnAuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIFwidHJhbnNsYXRlKDAsI3tAcmFkaXVzK0BtYXJnaW4udG9wKzV9KVwiKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAncGllY2hhcnQtbGFiZWxzJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpLnRleHQgKGQsIGkpIC0+XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhcnREYXRhLmxhYmVsXG4iXX0=