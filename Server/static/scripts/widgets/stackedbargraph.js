(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.StackedBarGraph = (function(superClass) {
    extend(StackedBarGraph, superClass);

    StackedBarGraph.prototype.colors = ['#249eb2', '#f45858', '#ec008c', '#249eb2', '#05DAD7', '#7CEF78'];

    function StackedBarGraph($ele, graphData) {
      this.$ele = $ele;
      this.graphData = graphData;
      this.redrawOnResize = true;
      this.margin = {
        left: 17,
        right: 15,
        top: 15,
        bottom: 19
      };
      StackedBarGraph.__super__.constructor.call(this, this.$ele, this.graphData);
    }

    StackedBarGraph.prototype.onRender = function() {
      var barWidth, colorScale, grpLabelEles, grpdGraphData, height, hoverLabel, legendHeight, len, rect, values, width, xBar, xDomain, xScale, yAxis, yAxisWidth, yDomain, yDomainMax, yScale;
      colorScale = d3.scale.ordinal().range(this.graphData.colors || this.colors);
      legendHeight = this.drawLegends(this.graphData.labels, this.colors);
      height = this.height - legendHeight - 20;
      yScale = d3.scale.linear().range([height, 0]);
      xScale = d3.scale.linear();
      colorScale = d3.scale.ordinal().range(this.graphData.colors || this.colors);
      hoverLabel = d3.scale.ordinal().range(this.graphData.labels);
      grpdGraphData = this.graphData.labels.map((function(_this) {
        return function(n) {
          return _this.graphData.data.map(function(d, i) {
            return {
              x: i,
              y: +d[n],
              y0: 0
            };
          });
        };
      })(this));
      d3.layout.stack()(grpdGraphData);
      yDomainMax = d3.max(this.graphData.data, function(d) {
        var k, sum, v;
        sum = 0;
        for (k in d) {
          v = d[k];
          if (k !== 'label') {
            sum += v;
          }
        }
        return sum;
      });
      yDomain = [0, yDomainMax];
      xDomain = [0, this.graphData.data.length - 1];
      xScale.domain(xDomain);
      yScale.domain(yDomain);
      yAxis = d3.svg.axis().scale(yScale).tickSize(-this.width, 0, 0).ticks(5).tickFormat(function(d, index) {
        if (index === 0) {
          return '';
        } else {
          return d;
        }
      }).orient('left');
      this.graphGrp.append('g').attr('class', 'yaxis').call(yAxis);
      yAxisWidth = 0;
      this.graphGrp.select('g.yaxis').selectAll('.tick').select('text').each(function(d) {
        return yAxisWidth = yAxisWidth < this.getBBox().width ? this.getBBox().width : yAxisWidth;
      }).attr({
        x: yAxisWidth
      });
      width = this.width - yAxisWidth;
      len = this.graphData.data.length;
      xScale.range([width / len / 2, width - width / len / 2]);
      xBar = d3.svg.axis().scale(xScale).ticks(this.graphData.data.length - 1).tickSize(height, 0, 0).tickFormat((function(_this) {
        return function(d, index) {
          return _this.graphData.data[index].label;
        };
      })(this)).orient('bottom');
      this.graphGrp.select('g.yaxis').selectAll('.tick').select('line').attr({
        transform: 'translate(' + yAxisWidth + ',0)',
        x2: width
      });
      this.graphGrp.append('g').attr('class', 'xaxis').attr('transform', 'translate(' + yAxisWidth + ',0)').call(xBar);
      grpLabelEles = this.graphGrp.selectAll('.valgroup').data(grpdGraphData).enter().append('g').attr('class', 'valgroup').style('fill', function(d, i) {
        return colorScale(i);
      }).attr('class', function(d, i) {
        return hoverLabel(i);
      });
      barWidth = Math.min(width / len * .6, 120);
      rect = grpLabelEles.selectAll('rect').data(Object).enter().append('svg:rect').attr('x', (function(_this) {
        return function(d, i) {
          return xScale(i) + yAxisWidth - barWidth / 2;
        };
      })(this)).attr('y', (function(_this) {
        return function(d) {
          return yScale(d.y0 + d.y);
        };
      })(this)).attr('height', (function(_this) {
        return function(d) {
          return yScale(0) - yScale(d.y);
        };
      })(this)).attr('width', barWidth);
      values = grpLabelEles.selectAll('text').data(Object).enter().append('svg:text').attr({
        'x': (function(_this) {
          return function(d, i) {
            return xScale(i) + yAxisWidth;
          };
        })(this),
        'y': (function(_this) {
          return function(d) {
            return yScale(d.y0 + d.y) + 3;
          };
        })(this),
        'class': 'graph-stacked-value'
      }).text((function(_this) {
        return function(d, i) {
          if (d.y > yDomainMax * 0.1) {
            return d.y;
          }
          return '';
        };
      })(this));
    };

    return StackedBarGraph;

  })(Graph);

}).call(this);

//# sourceMappingURL=data:application/json;base64,