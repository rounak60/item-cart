(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.LineGraph = (function(superClass) {
    extend(LineGraph, superClass);

    function LineGraph($ele, graphData) {
      this.$ele = $ele;
      this.graphData = graphData;
      this.margin = {
        top: 30,
        right: 30,
        bottom: 60,
        left: 50
      };
      LineGraph.__super__.constructor.call(this, this.$ele, this.graphData);
    }

    LineGraph.prototype.init = function() {
      var cities, city, color, data, height, i, line, make_x_axis, parseDate, width, x, xAxis, y, yAxis;
      width = this.width;
      height = this.height;
      parseDate = d3.time.format('%m%d').parse;
      x = d3.time.scale().range([0, width]);
      y = d3.scale.linear().range([height, 0]);
      color = d3.scale.category10();
      xAxis = d3.svg.axis().scale(x).orient('bottom').ticks(4).tickFormat(function(d) {
        var m;
        m = d.getMonth() + 1;
        return d.getDate() + '/' + m;
      });
      yAxis = d3.svg.axis().scale(y).orient('left').ticks(4);
      line = d3.svg.line().interpolate('linear').x(function(d) {
        return x(d.date);
      }).y(function(d) {
        return y(d.temperature);
      });
      make_x_axis = function() {
        return d3.svg.axis().scale(x).orient('bottom').ticks(4);
      };
      data = this.graphData.data;
      color.domain(d3.keys(data[0]).filter(function(key) {
        return key !== 'date';
      }));
      data.forEach(function(d) {
        var date;
        date = d.label;
        if (date != null) {
          date = date.replace("/", "");
        }
        d.date = parseDate(date);
      });
      cities = color.domain().map(function(name) {
        return {
          name: name,
          values: data.map(function(d) {
            return {
              date: d.date,
              temperature: +d[name]
            };
          })
        };
      });
      x.domain(d3.extent(data, function(d) {
        return d.date;
      }));
      y.domain([
        d3.min(cities, function(c) {
          return d3.min(c.values, function(v) {
            return v.temperature;
          });
        }), d3.max(cities, function(c) {
          return d3.max(c.values, function(v) {
            return v.temperature;
          });
        })
      ]);
      this.baseGroup.append('g').attr('class', 'x axis').attr('transform', 'translate(0,' + height + ')').call(xAxis);
      this.baseGroup.append('g').attr('class', 'y axis open').call(yAxis).append('text').attr('transform', 'rotate(-90)').attr('y', 6).attr('dy', '.71em').style('text-anchor', 'end');
      this.baseGroup.append('g').attr('class', 'grid open ').attr('transform', 'translate(0,' + height + ')').call(make_x_axis().tickSize(-height, 0, 0).tickFormat(''));
      city = this.baseGroup.selectAll('.city').data(cities).enter().append('g').attr('class', 'city');
      city.append('path').attr('class', function(d) {
        return 'line ' + d.name;
      }).attr('d', function(d) {
        return line(d.values);
      }).style('stroke', function(d) {
        if (d.name === 'open') {
          return 'rgb(186,0,96)';
        }
        if (d.name === 'closed') {
          return 'rgb(106,106,106)';
        }
        if (d.name === 'resolved') {
          return 'rgb(225,0,117)';
        }
      });
      i = 0;
      while (i < data.length) {
        city.append('circle').attr('cx', function(d) {
          return x(d.values[i].date);
        }).attr('cy', function(d) {
          return y(d.values[i].temperature);
        }).attr('r', '3px').attr('fill', function(d) {
          if (d.name === 'open') {
            return 'rgb(186,0,96)';
          }
          if (d.name === 'closed') {
            return 'rgb(106,106,106)';
          }
          if (d.name === 'resolved') {
            return 'rgb(225,0,117)';
          }
        });
        ++i;
      }
      city.append('rect').attr('x', function(d, i) {
        return 30 + 120 * i;
      }).attr('y', 335).attr('width', 10).attr('height', 10).attr('fill', function(d) {
        if (d.name === 'open') {
          return 'rgb(186,0,96)';
        }
        if (d.name === 'closed') {
          return 'rgb(106,106,106)';
        }
        if (d.name === 'resolved') {
          return 'rgb(225,0,117)';
        }
      });
      city.append('text').attr('x', function(d, i) {
        return 50 + 120 * i;
      }).attr('y', 345).text(function(d) {
        return d.name;
      });
    };

    return LineGraph;

  })(Graph);

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndpZGdldHMvbGluZWdyYXBoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7K0JBQUE7O0FBQUEsRUFBTSxNQUFNLENBQUM7QUFDVCxpQ0FBQSxDQUFBOztBQUFhLElBQUEsbUJBQUMsSUFBRCxFQUFPLFNBQVAsR0FBQTtBQUVULE1BRlUsSUFBQyxDQUFBLE9BQUQsSUFFVixDQUFBO0FBQUEsTUFGZ0IsSUFBQyxDQUFBLFlBQUQsU0FFaEIsQ0FBQTtBQUFBLE1BQUEsSUFBQyxDQUFBLE1BQUQsR0FDSTtBQUFBLFFBQUEsR0FBQSxFQUFLLEVBQUw7QUFBQSxRQUNBLEtBQUEsRUFBTyxFQURQO0FBQUEsUUFFQSxNQUFBLEVBQVEsRUFGUjtBQUFBLFFBR0EsSUFBQSxFQUFNLEVBSE47T0FESixDQUFBO0FBQUEsTUFNQSwyQ0FBTSxJQUFDLENBQUEsSUFBUCxFQUFZLElBQUMsQ0FBQSxTQUFiLENBTkEsQ0FGUztJQUFBLENBQWI7O0FBQUEsd0JBVUEsSUFBQSxHQUFLLFNBQUEsR0FBQTtBQUNELFVBQUEsNkZBQUE7QUFBQSxNQUFBLEtBQUEsR0FBUSxJQUFDLENBQUEsS0FBVCxDQUFBO0FBQUEsTUFDQSxNQUFBLEdBQVMsSUFBQyxDQUFBLE1BRFYsQ0FBQTtBQUFBLE1BRUEsU0FBQSxHQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBUixDQUFlLE1BQWYsQ0FBc0IsQ0FBQyxLQUZuQyxDQUFBO0FBQUEsTUFHQSxDQUFBLEdBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFSLENBQUEsQ0FBZSxDQUFDLEtBQWhCLENBQXNCLENBQ3RCLENBRHNCLEVBRXRCLEtBRnNCLENBQXRCLENBSEosQ0FBQTtBQUFBLE1BT0EsQ0FBQSxHQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBVCxDQUFBLENBQWlCLENBQUMsS0FBbEIsQ0FBd0IsQ0FDeEIsTUFEd0IsRUFFeEIsQ0FGd0IsQ0FBeEIsQ0FQSixDQUFBO0FBQUEsTUFXQSxLQUFBLEdB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QUssR0FBQSxHQUFNLEVBRGU7TUFBQSxDQUE5QixDQUVDLENBQUMsSUFGRixDQUVPLEdBRlAsRUFFWSxHQUZaLENBRWdCLENBQUMsSUFGakIsQ0FFc0IsT0FGdEIsRUFFK0IsRUFGL0IsQ0FFa0MsQ0FBQyxJQUZuQyxDQUV3QyxRQUZ4QyxFQUVrRCxFQUZsRCxDQUVxRCxDQUFDLElBRnRELENBRTJELE1BRjNELEVBRW1FLFNBQUMsQ0FBRCxHQUFBO0FBQy9ELFFBQUEsSUFBRyxDQUFDLENBQUMsSUFBRixLQUFVLE1BQWI7QUFDSSxpQkFBTyxlQUFQLENBREo7U0FBQTtBQUVBLFFBQUEsSUFBRyxDQUFDLENBQUMsSUFBRixLQUFVLFFBQWI7QUFDSSxpQkFBTyxrQkFBUCxDQURKO1NBRkE7QUFJQSxRQUFBLElBQUcsQ0FBQyxDQUFDLElBQUYsS0FBVSxVQUFiO0FBQ0ksaUJBQU8sZ0JBQVAsQ0FESjtTQUwrRDtNQUFBLENBRm5FLENBakdBLENBQUE7QUFBQSxNQTJHQSxJQUFJLENBQUMsTUFBTCxDQUFZLE1BQVosQ0FBbUIsQ0FBQyxJQUFwQixDQUF5QixHQUF6QixFQUE4QixTQUFDLENBQUQsRUFBSSxDQUFKLEdBQUE7ZUFDMUIsRUFBQSxHQUFLLEdBQUEsR0FBTSxFQURlO01BQUEsQ0FBOUIsQ0FFQyxDQUFDLElBRkYsQ0FFTyxHQUZQLEVBRVksR0FGWixDQUVnQixDQUFDLElBRmpCLENBRXNCLFNBQUMsQ0FBRCxHQUFBO2VBQ2xCLENBQUMsQ0FBQyxLQURnQjtNQUFBLENBRnRCLENBM0dBLENBREM7SUFBQSxDQVZMLENBQUE7O3FCQUFBOztLQUQyQixNQUEvQixDQUFBO0FBQUEiLCJmaWxlIjoid2lkZ2V0cy9saW5lZ3JhcGguanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyB3aW5kb3cuTGluZUdyYXBoIGV4dGVuZHMgR3JhcGhcbiAgICBjb25zdHJ1Y3RvcjogKEAkZWxlLEBncmFwaERhdGEpLT5cblxuICAgICAgICBAbWFyZ2luID1cbiAgICAgICAgICAgIHRvcDogMzBcbiAgICAgICAgICAgIHJpZ2h0OiAzMFxuICAgICAgICAgICAgYm90dG9tOiA2MFxuICAgICAgICAgICAgbGVmdDogNTBcblxuICAgICAgICBzdXBlciBAJGVsZSxAZ3JhcGhEYXRhXG5cbiAgICBpbml0Oi0+XG4gICAgICAgIHdpZHRoID0gQHdpZHRoXG4gICAgICAgIGhlaWdodCA9IEBoZWlnaHRcbiAgICAgICAgcGFyc2VEYXRlID0gZDMudGltZS5mb3JtYXQoJyVtJWQnKS5wYXJzZVxuICAgICAgICB4ID0gZDMudGltZS5zY2FsZSgpLnJhbmdlKFtcbiAgICAgICAgICAgIDBcbiAgICAgICAgICAgIHdpZHRoXG4gICAgICAgIF0pXG4gICAgICAgIHkgPSBkMy5zY2FsZS5saW5lYXIoKS5yYW5nZShbXG4gICAgICAgICAgICBoZWlnaHRcbiAgICAgICAgICAgIDBcbiAgICAgICAgXSlcbiAgICAgICAgY29sb3IgPSBkMy5zY2FsZS5jYXRlZ29yeTEwKClcblxuICAgICAgICAjW1wicmdiKDE4NiwwLDk2KVwiLFwicmdiKDEwNiwxMDYsMTA2KVwiLCBcInJnYigyMjUsMCwxMTcpXCJdO1xuICAgICAgICB4QXhpcyA9IGQzLnN2Zy5heGlzKCkuc2NhbGUoeCkub3JpZW50KCdib3R0b20nKS50aWNrcyg0KS50aWNrRm9ybWF0KChkKSAtPlxuICAgICAgICAgICAgbSA9IGQuZ2V0TW9udGgoKSArIDFcbiAgICAgICAgICAgIGQuZ2V0RGF0ZSgpICsgJy8nICsgbVxuICAgICAgICApXG4gICAgICAgIHlBeGlzID0gZDMuc3ZnLmF4aXMoKS5zY2FsZSh5KS5vcmllbnQoJ2xlZnQnKS50aWNrcyg0KVxuICAgICAgICBsaW5lID0gZDMuc3ZnLmxpbmUoKS5pbnRlcnBvbGF0ZSgnbGluZWFyJykueCgoZCkgLT5cbiAgICAgICAgICAgIHggZC5kYXRlXG4gICAgICAgICkueSgoZCkgLT5cbiAgICAgICAgICAgIHkgZC50ZW1wZXJhdHVyZVxuICAgICAgICApXG5cblxuICAgICAgICBtYWtlX3hfYXhpcyA9IC0+XG4gICAgICAgICAgICBkMy5zdmcuYXhpcygpLnNjYWxlKHgpLm9yaWVudCgnYm90dG9tJykudGlja3MgNFxuXG4gICAgICAgIGRhdGEgPSBAZ3JhcGhEYXRhLmRhdGFcblxuICAgICAgICBjb2xvci5kb21haW4gZDMua2V5cyhkYXRhWzBdKS5maWx0ZXIoKGtleSkgLT5cbiAgICAgICAgICAgIGtleSAhPSAnZGF0ZSdcbiAgICAgICAgKVxuXG4gICAgICAgIGRhdGEuZm9yRWFjaCAoZCkgLT5cbiAgICAgICAgICAgIGRhdGUgPSAgZC5sYWJlbFxuICAgICAgICAgICAgaWYgZGF0ZT9cbiAgICAgICAgICAgICAgICBkYXRlID0gZGF0ZS5yZXBsYWNlKFwiL1wiLCBcIlwiKVxuICAgICAgICAgICAgZC5kYXRlID0gcGFyc2VEYXRlKGRhdGUpXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgY2l0aWVzID0gY29sb3IuZG9tYWluKCkubWFwKChuYW1lKSAtPlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IGRhdGEubWFwKChkKSAtPlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlOiBkLmRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBlcmF0dXJlOiArZFtuYW1lXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgIHguZG9tYWluIGQzLmV4dGVudChkYXRhLCAoZCkgLT5cbiAgICAgICAgICAgIGQuZGF0ZVxuICAgICAgICApXG4gICAgICAgIHkuZG9tYWluIFtcbiAgICAgICAgICAgIGQzLm1pbihjaXRpZXMsIChjKSAtPlxuICAgICAgICAgICAgICAgIGQzLm1pbiBjLnZhbHVlcywgKHYpIC0+XG4gICAgICAgICAgICAgICAgICAgIHYudGVtcGVyYXR1cmVcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIGQzLm1heChjaXRpZXMsIChjKSAtPlxuICAgICAgICAgICAgICAgIGQzLm1heCBjLnZhbHVlcywgKHYpIC0+XG4gICAgICAgICAgICAgICAgICAgIHYudGVtcGVyYXR1cmVcbiAgICAgICAgICAgIClcbiAgICAgICAgXVxuXG4gICAgICAgIEBiYXNlR3JvdXAuYXBwZW5kKCdnJykuYXR0cignY2xhc3MnLCAneCBheGlzJykuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCcgKyBoZWlnaHQgKyAnKScpLmNhbGwgeEF4aXNcbiAgICAgICAgQGJhc2VHcm91cC5hcHBlbmQoJ2cnKS5hdHRyKCdjbGFzcycsICd5IGF4aXMgb3BlbicpLmNhbGwoeUF4aXMpLmFwcGVuZCgndGV4dCcpLmF0dHIoJ3RyYW5zZm9ybScsICdyb3RhdGUoLTkwKScpLmF0dHIoJ3knLCA2KS5hdHRyKCdkeScsICcuNzFlbScpLnN0eWxlICd0ZXh0LWFuY2hvcicsICdlbmQnXG4gICAgICAgIEBiYXNlR3JvdXAuYXBwZW5kKCdnJykuYXR0cignY2xhc3MnLCAnZ3JpZCBvcGVuICcpLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoMCwnICsgaGVpZ2h0ICsgJyknKS5jYWxsIG1ha2VfeF9heGlzKCkudGlja1NpemUoLWhlaWdodCwgMCwgMCkudGlja0Zvcm1hdCgnJylcbiAgICAgICAgY2l0eSA9IEBiYXNlR3JvdXAuc2VsZWN0QWxsKCcuY2l0eScpLmRhdGEoY2l0aWVzKS5lbnRlcigpLmFwcGVuZCgnZycpLmF0dHIoJ2NsYXNzJywgJ2NpdHknKVxuICAgICAgICBjaXR5LmFwcGVuZCgncGF0aCcpLmF0dHIoJ2NsYXNzJywgKGQpIC0+XG4gICAgICAgICAgICAnbGluZSAnICsgZC5uYW1lXG4gICAgICAgICkuYXR0cignZCcsIChkKSAtPlxuICAgICAgICAgICAgbGluZSBkLnZhbHVlc1xuICAgICAgICApLnN0eWxlICdzdHJva2UnLCAoZCkgLT5cbiAgICAgICAgICAgIGlmIGQubmFtZSA9PSAnb3BlbidcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3JnYigxODYsMCw5NiknXG4gICAgICAgICAgICBpZiBkLm5hbWUgPT0gJ2Nsb3NlZCdcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3JnYigxMDYsMTA2LDEwNiknXG4gICAgICAgICAgICBpZiBkLm5hbWUgPT0gJ3Jlc29sdmVkJ1xuICAgICAgICAgICAgICAgIHJldHVybiAncmdiKDIyNSwwLDExNyknXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgaSA9IDBcbiAgICAgICAgd2hpbGUgaSA8IGRhdGEubGVuZ3RoXG4gICAgICAgICAgICBjaXR5LmFwcGVuZCgnY2lyY2xlJykuYXR0cignY3gnLCAoZCkgLT5cbiAgICAgICAgICAgICAgICB4IGQudmFsdWVzW2ldLmRhdGVcbiAgICAgICAgICAgICkuYXR0cignY3knLCAoZCkgLT5cbiAgICAgICAgICAgICAgICB5IGQudmFsdWVzW2ldLnRlbXBlcmF0dXJlXG4gICAgICAgICAgICApLmF0dHIoJ3InLCAnM3B4JykuYXR0ciAnZmlsbCcsIChkKSAtPlxuICAgICAgICAgICAgICAgIGlmIGQubmFtZSA9PSAnb3BlbidcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdyZ2IoMTg2LDAsOTYpJ1xuICAgICAgICAgICAgICAgIGlmIGQubmFtZSA9PSAnY2xvc2VkJ1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3JnYigxMDYsMTA2LDEwNiknXG4gICAgICAgICAgICAgICAgaWYgZC5uYW1lID09ICdyZXNvbHZlZCdcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdyZ2IoMjI1LDAsMTE3KSdcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICsraVxuICAgICAgICBjaXR5LmFwcGVuZCgncmVjdCcpLmF0dHIoJ3gnLCAoZCwgaSkgLT5cbiAgICAgICAgICAgIDMwICsgMTIwICogaVxuICAgICAgICApLmF0dHIoJ3knLCAzMzUpLmF0dHIoJ3dpZHRoJywgMTApLmF0dHIoJ2hlaWdodCcsIDEwKS5hdHRyICdmaWxsJywgKGQpIC0+XG4gICAgICAgICAgICBpZiBkLm5hbWUgPT0gJ29wZW4nXG4gICAgICAgICAgICAgICAgcmV0dXJuICdyZ2IoMTg2LDAsOTYpJ1xuICAgICAgICAgICAgaWYgZC5uYW1lID09ICdjbG9zZWQnXG4gICAgICAgICAgICAgICAgcmV0dXJuICdyZ2IoMTA2LDEwNiwxMDYpJ1xuICAgICAgICAgICAgaWYgZC5uYW1lID09ICdyZXNvbHZlZCdcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3JnYigyMjUsMCwxMTcpJ1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIGNpdHkuYXBwZW5kKCd0ZXh0JykuYXR0cigneCcsIChkLCBpKSAtPlxuICAgICAgICAgICAgNTAgKyAxMjAgKiBpXG4gICAgICAgICkuYXR0cigneScsIDM0NSkudGV4dCAoZCkgLT5cbiAgICAgICAgICAgIGQubmFtZVxuICAgICAgICByZXR1cm5cbiJdfQ==