(function() {
  var addConstant;

  window.WidgetBuilderFormConstants = [];

  addConstant = function(key, value) {
    return WidgetBuilderFormConstants[key] = value;
  };

  addConstant('LABEL_FIELD', {
    type: "text",
    name: "label"
  });

  addConstant('CUSTOM_FIELD', {
    type: "number",
    name: "custom"
  });

  addConstant('SIMPLE_FORM', [
    WidgetBuilderFormConstants.LABEL_FIELD, {
      type: "number",
      name: "d"
    }, {
      type: "text",
      name: "subtext",
      optional: true
    }
  ]);

  window.WidgetBuilder = (function() {
    WidgetBuilder.prototype.graphIcon = void 0;

    WidgetBuilder.prototype.type = "1";

    WidgetBuilder.prototype.supports = void 0;

    function WidgetBuilder(name, type) {
      this.name = name;
      this.type = type || this.type;
      this.supports = {};
    }

    WidgetBuilder.prototype.addSupport = function(gridType, formData) {
      var gridSupport;
      gridSupport = new WidgetBuilderGridSupport(gridType, formData);
      gridSupport.type = this.type;
      gridSupport.className = this.className;
      gridSupport.parent = this;
      this.supports[gridType] = gridSupport;
      return gridSupport;
    };

    WidgetBuilder.prototype.addData = function(forGridType, data) {
      var targetGridEntry;
      targetGridEntry = this.hasSupport(forGridType);
      if (targetGridEntry) {
        return targetGridEntry.data = data;
      } else {
        throw new Error("Grid entry for mentioned grid type not available");
      }
    };

    WidgetBuilder.prototype.hasSupport = function(forGridType) {
      var targetGridEntry;
      targetGridEntry = this.supports[forGridType];
      if (targetGridEntry != null) {
        return targetGridEntry;
      }
      return false;
    };

    WidgetBuilder.prototype.getGrid = function(forGridType) {
      var targetGridEntry;
      targetGridEntry = this.hasSupport(forGridType);
      if (!targetGridEntry) {
        throw new Error("Grid entry for mentioned grid type not available");
      }
      return angular.copy(targetGridEntry);
    };

    return WidgetBuilder;

  })();

  window.WidgetBuilderGridSupport = (function() {
    WidgetBuilderGridSupport.prototype.rows = [1, 1];

    WidgetBuilderGridSupport.prototype.columns = 2;

    WidgetBuilderGridSupport.prototype.data = {};

    function WidgetBuilderGridSupport(gridType1, formData1) {
      this.gridType = gridType1;
      this.formData = formData1;
      this.setRowCount([1, 1]);
      this.setColumnCount(2);
    }

    WidgetBuilderGridSupport.prototype.setColumnCount = function(columnCount) {
      var minColNo;
      this.columns = columnCount;
      this.isColumnsFixed = typeof this.columns === "number" ? true : false;
      this.minColNo = minColNo = this.isColumnsFixed ? this.columns : this.columns[0];
      this.maxColNo = this.isColumnsFixed ? this.columns : this.columns[1];
      return this;
    };

    WidgetBuilderGridSupport.prototype.setRowCount = function(rowCount) {
      var minRowNo;
      this.rows = rowCount;
      this.isRowsFixed = typeof this.rows === "number" ? true : false;
      this.minRowNo = minRowNo = this.isRowsFixed ? this.rows : this.rows[0];
      this.maxRowNo = this.isRowsFixed ? this.rows : this.rows[1];
      return this;
    };

    WidgetBuilderGridSupport.prototype.setData = function(data) {
      this.data = angular.copy(data);
      return this;
    };

    return WidgetBuilderGridSupport;

  })();

  window.WidgetBuilderDataGenerator = (function() {
    function WidgetBuilderDataGenerator(gridSupportor, graphData) {
      var field, firstFormEntry, formData, i, j, k, l, label, labelData, labels, len, len1, len2, len3, m, minColNo, minRowNo, n, o, ref, ref1, ref2, ref3, ref4, ref5, ref6, row, rowData;
      this.gridSupportor = gridSupportor;
      this.gs = this.gridSupportor;
      this.graphData = angular.copy(graphData);
      formData = this.gridSupportor.formData;
      labelData = this.labelData = [];
      if (typeof this.graphData !== 'undefined') {
        this.rowData = rowData = ((ref = this.graphData) != null ? ref.data : void 0) || [];
      }
      labels = (ref1 = this.graphData) != null ? ref1.labels : void 0;
      minColNo = this.gridSupportor.minColNo;
      minRowNo = this.gridSupportor.minRowNo;
      if (labels == null) {
        labels = [];
        for (j = 0, len = formData.length; j < len; j++) {
          field = formData[j];
          if (!((ref2 = field.name) === 'label' || ref2 === 'custom')) {
            labels.push(field.name);
          }
        }
      }
      firstFormEntry = formData[0];
      if ((firstFormEntry != null) && firstFormEntry.name === 'label') {
        labels.unshift('label');
      }
      if (labels != null) {
        for (k = 0, len1 = labels.length; k < len1; k++) {
          label = labels[k];
          this.addColumn(label);
        }
      }
      if (minColNo > labelData.length) {
        for (i = l = ref3 = labelData.length, ref4 = minColNo; ref3 <= ref4 ? l < ref4 : l > ref4; i = ref3 <= ref4 ? ++l : --l) {
          this.addColumn('');
        }
      }
      for (m = 0, len2 = rowData.length; m < len2; m++) {
        row = rowData[m];
        for (n = 0, len3 = labelData.length; n < len3; n++) {
          label = labelData[n];
          if (label.name !== '') {
            row[label.id] = row[label.name];
            delete row[label.name];
          }
        }
      }
      if (minRowNo > rowData.length) {
        for (i = o = ref5 = rowData.length, ref6 = minRowNo; ref5 <= ref6 ? o < ref6 : o > ref6; i = ref5 <= ref6 ? ++o : --o) {
          this.addRow();
        }
      }
      return;
    }

    WidgetBuilderDataGenerator.prototype.addRow = function() {
      return this.rowData.push({});
    };

    WidgetBuilderDataGenerator.prototype.addColumn = function(label, index) {
      var formData, formDataEntry, formDataIndex, labelItem;
      labelItem = {
        "name": label,
        'id': generateRandom()
      };
      labelItem.placeholder = (labelItem.name === 'd' ? "Value" : labelItem.name);
      if (index != null) {
        arr.splice(index, 0, labelItem);
      } else {
        this.labelData.push(labelItem);
      }
      formData = this.gridSupportor.formData;
      formDataIndex = Math.min(this.labelData.length, formData.length) - 1;
      formDataEntry = formData[formDataIndex];
      labelItem.form = angular.copy(formDataEntry);
      return true;
    };

    WidgetBuilderDataGenerator.prototype.isAllowAddRow = function() {
      if (this.gridSupportor.isRowsFixed) {
        return false;
      }
      return this.rowData.length < this.gridSupportor.rows[1];
    };

    WidgetBuilderDataGenerator.prototype.deleteColumn = function(entry) {
      var index;
      index = this.labelData.indexOf(entry);
      return this.labelData.splice(index, 1);
    };

    WidgetBuilderDataGenerator.prototype.deleteRow = function(entry) {
      var index;
      index = this.rowData.indexOf(entry);
      return this.rowData.splice(index, 1);
    };

    WidgetBuilderDataGenerator.prototype.isAllowAddColumn = function() {
      if (this.gridSupportor.isColumnsFixed) {
        return false;
      }
      return this.labelData.length < this.gridSupportor.columns[1];
    };

    WidgetBuilderDataGenerator.prototype.isAllowDeleteRow = function() {
      if (this.gridSupportor.isRowsFixed) {
        return false;
      }
      return this.rowData.length > this.gridSupportor.rows[0];
    };

    WidgetBuilderDataGenerator.prototype.isAllowDeleteColumn = function() {
      if (this.gridSupportor.isColumnsFixed) {
        return false;
      }
      return this.labelData.length > this.gridSupportor.columns[0];
    };

    WidgetBuilderDataGenerator.prototype.getSrc = function(column) {
      if (typeof column.form.src === "string") {
        return this.gs.data[column.form.src];
      }
      return column.form.src;
    };

    WidgetBuilderDataGenerator.prototype.setModel = function(column, output) {
      var entry, j, len, srcList;
      srcList = this.getSrc(column);
      if (srcList == null) {
        throw new Error("Src is undefined for column", column);
      }
      if (output != null) {
        for (j = 0, len = srcList.length; j < len; j++) {
          entry = srcList[j];
          if (entry.name === output.name) {
            return entry;
          }
        }
      }
      return column.form["default"];
    };

    WidgetBuilderDataGenerator.prototype.output = function() {
      var entry, i, isBlankRow, j, k, l, labelEntry, len, len1, len2, len3, m, newRow, newVal, output, ref, ref1, ref2, row, rowData, rowIndex, src;
      output = {
        labels: [],
        data: []
      };
      rowData = angular.copy(this.rowData);
      ref = this.labelData;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        entry = ref[i];
        if (entry.name.trim() === '') {
          entry.name = "Region " + i;
        }
      }
      for (rowIndex = k = 0, len1 = rowData.length; k < len1; rowIndex = ++k) {
        row = rowData[rowIndex];
        newRow = {};
        isBlankRow = true;
        ref1 = this.labelData;
        for (l = 0, len2 = ref1.length; l < len2; l++) {
          labelEntry = ref1[l];
          newVal = row[labelEntry.id];
          if (newVal == null) {
            newVal = (function() {
              switch (labelEntry.form.type) {
                case "number":
                  return 0;
                case "text":
                case "textarea":
                  return '';
                case "file":
                  return void 0;
                case "select":
                  src = this.getSrc(labelEntry);
                  console.log(src, src[src.length - 1]);
                  return src[src.length - 1];
              }
            }).call(this);
          } else {
            isBlankRow = false;
          }
          newRow[labelEntry.name] = newVal;
        }
        if (!isBlankRow) {
          output.data.push(newRow);
        }
      }
      ref2 = this.labelData;
      for (m = 0, len3 = ref2.length; m < len3; m++) {
        labelEntry = ref2[m];
        if (labelEntry.name === 'label') {
          continue;
        }
        output.labels.push(labelEntry.name);
      }
      console.log(output);
      return output;
    };

    return WidgetBuilderDataGenerator;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,