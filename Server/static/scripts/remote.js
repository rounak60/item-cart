(function() {
  app.service("mySocket", [
    '$http', '$q', function($http, $q) {
      return {
        isSender: false,
        url: '',
        clientName: 'Unknown',
        connect: function(clientName) {
          this.clientName = clientName;
          this.socket = io.connect('http://' + document.domain + ':' + location.port + '/api/remote');
          console.log("I am " + this.clientName);
          this.socket.on('connect', (function(_this) {
            return function() {
              console.log("Client Connected");
              _this.socket.emit('user_details', {
                'clientName': _this.clientName
              });
            };
          })(this));
          return this.socket.on('disconnect', function() {
            console.log("Client Disconnected");
          });
        },
        refresh_client_listener: function() {
          return this.socket.on('refresh_clients', function() {
            location.reload();
          });
        },
        setupRemote: function(device) {
          if (device == null) {
            device = "sender";
          }
          if (device === "sender") {
            this.isSender = true;
          }
          if (device === "reciever") {
            this.isReciever = true;
          }
          if (!(this.isSender || this.isReciever)) {
            return;
          }
          return this.socket.on('remote_reaction', (function(_this) {
            return function(result) {
              var $clickedEle;
              if (result.clientName === _this.clientName) {
                return;
              }
              if (result.data.action === "goToDetail") {
                $clickedEle = $("[widget-id=\"" + result.data.id + "\"]");
                if ($clickedEle.length !== 1) {
                  if ($clickedEle.length === 0) {
                    alert("clicked element not found on display screen");
                  } else {
                    alert("Multiple widget with same id found");
                    console.log("Multiple widget with same id ", $clickedEle);
                  }
                  return;
                }
                return $clickedEle.trigger('click');
              }
            };
          })(this));
        },
        remoteAction: function(data) {
          if (!this.isSender) {
            return;
          }
          return this.socket.emit('remote_action', {
            'clientName': this.clientName,
            data: data
          });
        },
        refreshClient: function() {
          return this.socket.emit('refresh_client_request', {});
        }
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,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b0JBQUEsS0FBQSxDQUFNLDZDQUFOLENBQUEsQ0FESjttQkFBQSxNQUFBO0FBR0ksb0JBQUEsS0FBQSxDQUFNLG9DQUFOLENBQUEsQ0FBQTtBQUFBLG9CQUNBLE9BQU8sQ0FBQyxHQUFSLENBQWEsK0JBQWIsRUFBNkMsV0FBN0MsQ0FEQSxDQUhKO21CQUFBO0FBS0Esd0JBQUEsQ0FOSjtpQkFEQTt1QkFTQSxXQUFXLENBQUMsT0FBWixDQUFvQixPQUFwQixFQVZKO2VBSnlCO1lBQUEsRUFBQTtVQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBN0IsRUFWVTtRQUFBLENBN0JkO0FBQUEsUUF5REEsWUFBQSxFQUFjLFNBQUMsSUFBRCxHQUFBO0FBQ1YsVUFBQSxJQUFHLENBQUEsSUFBSyxDQUFBLFFBQVI7QUFDSSxrQkFBQSxDQURKO1dBQUE7aUJBR0EsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFSLENBQWEsZUFBYixFQUE4QjtBQUFBLFlBQUMsWUFBQSxFQUFjLElBQUMsQ0FBQSxVQUFoQjtBQUFBLFlBQTRCLElBQUEsRUFBTyxJQUFuQztXQUE5QixFQUpVO1FBQUEsQ0F6RGQ7QUFBQSxRQWdFQSxhQUFBLEVBQWUsU0FBQSxHQUFBO2lCQUNYLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBUixDQUFhLHdCQUFiLEVBQXVDLEVBQXZDLEVBRFc7UUFBQSxDQWhFZjtRQUZpQztJQUFBLENBQWQ7R0FBdkIsQ0FBQSxDQUFBO0FBQUEiLCJmaWxlIjoicmVtb3RlLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiYXBwLnNlcnZpY2UgXCJteVNvY2tldFwiLFsnJGh0dHAnLCckcScsKCRodHRwLCRxKSAtPlxuXG4gICAgaXNTZW5kZXIgOiBmYWxzZVxuICAgIHVybCAgICAgIDogJydcbiAgICBjbGllbnROYW1lIDogJ1Vua25vd24nXG5cbiAgICBjb25uZWN0ICA6IChjbGllbnROYW1lKSAtPlxuXG4gICAgICAgIEBjbGllbnROYW1lID0gY2xpZW50TmFtZVxuXG4gICAgICAgIEBzb2NrZXQgPSBpby5jb25uZWN0KCdodHRwOi8vJyArIGRvY3VtZW50LmRvbWFpbiArICc6JyArIGxvY2F0aW9uLnBvcnQgKyAnL2FwaS9yZW1vdGUnKVxuXG4gICAgICAgIGNvbnNvbGUubG9nIFwiSSBhbSBcIiArIEBjbGllbnROYW1lXG5cbiAgICAgICAgQHNvY2tldC5vbiAnY29ubmVjdCcsID0+XG4gICAgICAgICAgICBjb25zb2xlLmxvZyAgXCJDbGllbnQgQ29ubmVjdGVkXCJcbiAgICAgICAgICAgIEBzb2NrZXQuZW1pdCAndXNlcl9kZXRhaWxzJywgeydjbGllbnROYW1lJzogQGNsaWVudE5hbWV9XG4gICAgICAgICAgICByZXR1cm5cblxuICAgICAgICBAc29ja2V0Lm9uICdkaXNjb25uZWN0JywgLT5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nICBcIkNsaWVudCBEaXNjb25uZWN0ZWRcIlxuICAgICAgICAgICAgcmV0dXJuXG5cblxuICAgIHJlZnJlc2hfY2xpZW50X2xpc3RlbmVyIDogLT5cbiAgICAgICAgQHNvY2tldC5vbiAncmVmcmVzaF9jbGllbnRzJywgLT5cbiAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICAgICAgICByZXR1cm5cblxuXG5cbiAgICBzZXR1cFJlbW90ZSA6IChkZXZpY2U9XCJzZW5kZXJcIiktPlxuICAgICAgICBpZiBkZXZpY2UgaXMgXCJzZW5kZXJcIlxuICAgICAgICAgICAgQGlzU2VuZGVyID0gdHJ1ZVxuXG4gICAgICAgIGlmIGRldmljZSBpcyBcInJlY2lldmVyXCJcbiAgICAgICAgICAgIEBpc1JlY2lldmVyID0gdHJ1ZVxuXG4gICAgICAgIGlmIG5vdCAoIEBpc1NlbmRlciBvciAgQGlzUmVjaWV2ZXIgKVxuICAgICAgICAgICAgcmV0dXJuXG5cbiAgICAgICAgQHNvY2tldC5vbiAncmVtb3RlX3JlYWN0aW9uJywocmVzdWx0KT0+XG4gICAgICAgICAgICBpZiByZXN1bHQuY2xpZW50TmFtZSBpcyBAY2xpZW50TmFtZVxuICAgICAgICAgICAgICAgIHJldHVyblxuXG4gICAgICAgICAgICBpZiByZXN1bHQuZGF0YS5hY3Rpb24gaXMgXCJnb1RvRGV0YWlsXCJcbiAgICAgICAgICAgICAgICAkY2xpY2tlZEVsZSA9ICQoXCJbd2lkZ2V0LWlkPVxcXCIje3Jlc3VsdC5kYXRhLmlkfVxcXCJdXCIpXG4gICAgICAgICAgICAgICAgaWYgJGNsaWNrZWRFbGUubGVuZ3RoIGlzbnQgMVxuICAgICAgICAgICAgICAgICAgICBpZiAkY2xpY2tlZEVsZS5sZW5ndGggaXMgMFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQgXCJjbGlja2VkIGVsZW1lbnQgbm90IGZvdW5kIG9uIGRpc3BsYXkgc2NyZWVuXCJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQgXCJNdWx0aXBsZSB3aWRnZXQgd2l0aCBzYW1lIGlkIGZvdW5kXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nICBcIk11bHRpcGxlIHdpZGdldCB3aXRoIHNhbWUgaWQgXCIsJGNsaWNrZWRFbGVcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG5cbiAgICAgICAgICAgICAgICAkY2xpY2tlZEVsZS50cmlnZ2VyICdjbGljaydcblxuXG5cbiAgICByZW1vdGVBY3Rpb246IChkYXRhKSAtPlxuICAgICAgICBpZiBub3QgQGlzU2VuZGVyXG4gICAgICAgICAgICByZXR1cm5cblxuICAgICAgICBAc29ja2V0LmVtaXQgJ3JlbW90ZV9hY3Rpb24nLCB7J2NsaWVudE5hbWUnOiBAY2xpZW50TmFtZSwgZGF0YSA6IGRhdGF9XG5cblxuICAgIHJlZnJlc2hDbGllbnQ6IC0+XG4gICAgICAgIEBzb2NrZXQuZW1pdCAncmVmcmVzaF9jbGllbnRfcmVxdWVzdCcsIHt9XG5dXG5cbiMgYXBwLnJ1biggKCRyb290U2NvcGUsbXlTb2NrZXQpLT5cbiMgICAgIGNsaWVudE5hbWUgPSBcIkNsaWVudFwiICsgZ2VuZXJhdGVSYW5kb20oKVxuIyAgICAgbXlTb2NrZXQuY29ubmVjdChjbGllbnROYW1lKVxuI1xuIyAgICAgIyBpZiBub3QgYnVpbGRlclxuIyAgICAgaWYgbm90ICh3aW5kb3cuaXNCdWlsZGVyPyBhbmQgd2luZG93LmlzQnVpbGRlciBpcyB0cnVlKVxuIyAgICAgICAgIG15U29ja2V0LnJlZnJlc2hfY2xpZW50X2xpc3RlbmVyKClcbiNcbiMgICAgIGlmIHdpbmRvdy5pc1JlbW90ZT8gYW5kIHdpbmRvdy5pc1JlbW90ZSBpcyB0cnVlXG4jICAgICAgICAgY29uc29sZS5sb2cgXCJzZW5kZXJcIlxuIyAgICAgICAgIG15U29ja2V0LnNldHVwUmVtb3RlKFwic2VuZGVyXCIpXG4jXG4jICAgICBlbHNlIGlmIHdpbmRvdy5pc0Rpc3BsYXk/IGFuZCB3aW5kb3cuaXNEaXNwbGF5IGlzIHRydWVcbiMgICAgICAgICBjb25zb2xlLmxvZyBcInJlY2lldmVyXCJcbiMgICAgICAgICBteVNvY2tldC5zZXR1cFJlbW90ZShcInJlY2lldmVyXCIpXG4jXG4jIClcbiMgd2luZG93LnJlZnJlc2hBbGxDbGllbnRzID0gLT5cbiMgICAgIGFuZ3VsYXIuaW5qZWN0b3IoWyduZycsICdteUFwcCddKS5nZXQoXCJteVNvY2tldFwiKS5yZWZyZXNoQ2xpZW50KClcbiMgICAgIHJldHVyblxuIl19