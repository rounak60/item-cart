(function() {
  app.controller('Builder', [
    "$scope", "$timeout", function($scope, $timeout) {
      return $scope.builderWidgets = builderWidgets;
    }
  ]);

  app.directive("mrBuilderEditor", [
    "$compile", "$timeout", "Upload", function($compile, $timeout, Upload) {
      return {
        scope: {
          widget: ' =mrWidgetData',
          closeEditor: '&mrClose'
        },
        restrict: 'AE',
        templateUrl: 'partials/builderform.html',
        link: function(scope, $ele, attrs, ctlr) {
          var $builderBox, $dash, $editor, $widget;
          $dash = $('.dash');
          $builderBox = $('.builder-box');
          $editor = $ele.find('.builder-editor');
          $widget = $ele.closest('mr-widget');
          $ele.find('.builder-close').on('click', function() {
            $builderBox.css({
              'display': 'block'
            });
            $builderBox.velocity({
              opacity: 1
            }, {
              easing: 'ease-in-out',
              duration: 200
            });
            $editor.velocity({
              scale: [0.6, 1.0],
              opacity: .0
            }, {
              easing: 'ease-in-out',
              duration: 300,
              complete: function() {
                $ele.remove();
                $widget.removeClass('is-active');
                return $timeout(function() {
                  return $widget.removeClass('is-active-animate');
                }, 400);
              }
            });
            return $widget.addClass('is-active').addClass('is-active-animate');
          });
          $editor.css({
            'opacity': 0
          });
          $ele.addClass('builder-editor-wrp');
          $editor.addClass('dash');
          $timeout(function() {
            $ele.insertAfter($dash);
            return $timeout(function() {
              $builderBox.velocity({
                opacity: 0
              }, {
                easing: 'ease-in-out',
                duration: 300,
                complete: function() {
                  return $builderBox.css({
                    'display': 'none'
                  });
                }
              });
              return $editor.velocity({
                scale: [1.0, 0.6],
                opacity: 1.0
              }, {
                easing: 'ease-in-out',
                duration: 300
              });
            }, 30);
          }, 0);
        },
        controller: function($scope) {
          var entry, i, lastGraphName, len;
          $scope.builderWidgets = [];
          $scope.builderWidgetsNames = [];
          $scope.widgetData = $scope.widget.data;
          $scope.editedData = angular.copy($scope.widgetData);
          lastGraphName = '';
          $scope.gridBackup = {};
          for (i = 0, len = builderWidgets.length; i < len; i++) {
            entry = builderWidgets[i];
            if (entry.hasSupport($scope.widget.widgetType) === false) {
              continue;
            }
            $scope.builderWidgetsNames.push(entry.name);
            $scope.builderWidgets.push(entry);
            if (entry.name === $scope.editedData.graphName) {
              lastGraphName = entry.name;
            }
          }
          $scope.$watch('editedData.graphName', function(curGraphName) {
            var cached, gridSupportor, inputData, j, len1, newGrid, ref, results;
            if (curGraphName != null) {
              ref = $scope.builderWidgets;
              results = [];
              for (j = 0, len1 = ref.length; j < len1; j++) {
                entry = ref[j];
                if (entry.name === curGraphName) {
                  cached = $scope.gridBackup[curGraphName];
                  if (cached != null) {
                    newGrid = cached;
                  } else {
                    gridSupportor = entry.getGrid($scope.widget.widgetType);
                    if (entry.name === $scope.widgetData.graphName) {
                      inputData = $scope.widgetData.graphData;
                    } else {
                      inputData = angular.copy(gridSupportor.data);
                    }
                    newGrid = new WidgetBuilderDataGenerator(gridSupportor, inputData);
                  }
                  $scope.gridBackup[lastGraphName] = $scope.grid;
                  $scope.grid = newGrid;
                  results.push(lastGraphName = curGraphName);
                } else {
                  results.push(void 0);
                }
              }
              return results;
            }
          });
          return $scope.close = function(isSave) {
            var editedDataFinal;
            editedDataFinal = void 0;
            if (isSave) {
              editedDataFinal = angular.copy($scope.editedData);
              editedDataFinal.graphData = $scope.grid.output();
              $scope.widgetData.graphData = void 0;
              $timeout(function() {
                return angular.merge($scope.widgetData, editedDataFinal);
              });
            }
            $timeout(function() {
              return $scope.closeEditor({
                isSave: isSave,
                data: editedDataFinal
              });
            });
          };
        }
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=data:application/json;base64,